Generate 3 room
determine enemy position
first room became the currentRoom
add to pathfinding grid 


spawn set occupied
getPath
    getPossibleTiles
        filterout occupied
set destination occupied
set start not occupied

Did not work

Todo: there may be unneccesary SetNodeOccupied
func getPath(myposition : Vector2i, targetpos : Vector2i, range_ : int, border : bool) -> Array[Vector2i]:
	var myTilepos = local_to_map(myposition)
	var targetTilepos = local_to_map(targetpos)
	var path : Array[Vector2i] = []
	for p in pf.GetPath(myTilepos,targetTilepos, range_, border):
		path.append(p)
	if path.size() > 1:
		pf.SetNodeOccupied(myTilepos,false)
		pf.SetNodeOccupied(path.back(),true)
	elif path.size() == 1:
		print(path)
		print(pf.IsOccupied(path.back()))

	return path


func generateTerrain():
	var newPos = getNewPosition(currentCenter,preCenter)
	var collision = true
	while collision:
		collision = false
		for room in world:
			if pf.GetTileDistance(room.center, newPos) < radius + 2:
				collision = true
				break
		if collision:
			newPos = getNewPosition(currentCenter,preCenter)
	preCenter = currentCenter
	currentCenter = newPos
	print(currentCenter)
	var grid : Array[Vector2i] = []
	for p in gen.GenerateWorld(radius,currentCenter,preCenter):
		grid.push_back(p)
	
	world.push_back(Room.new(currentCenter,grid))
	if world.size()> roomMax:
		for p in world.front().grid:
			erase_cell(0,p)
			pf.RemoveFromGrid(p)
		world.pop_front()
	
	for p in grid:
		if get_cell_source_id(0,p) != -1 || pf.GridContains(p):
			continue
		if p == currentCenter:
			set_cell(0,p,1,Vector2i(0,0))
		else:
			set_cell(0,p,1,Vector2i(1,0))
		pf.AddToGrid(p)

func getNewPosition(current : Vector2i, previous : Vector2i) -> Vector2:
	var previousDir : Vector2i = Vector2i(current.x - previous.x,current.y-previous.y)
	var directions = getDirections(previousDir)
	var dir = directions.pick_random()
	var length = Vector2(randf_range(1.3,1.4),randf_range(1.3,1.4))
	return Vector2(current.x + dir.x * length.x * radius, current.y + dir.y*length.y * radius)

func getDirections(dir : Vector2i) -> Array[Vector2i]:
	var dirs : Array[Vector2i] = []
	if dir.x == 0 and dir.y > 0:
		dirs = [Vector2i(-1,0),Vector2i(1,0),Vector2i(-1,-1),Vector2i(0,-1),Vector2i(1,-1)]
	elif dir.x > 0 and dir.y == 0:
		dirs = [Vector2i(0,1),Vector2i(0,-1),Vector2i(-1,-1),Vector2i(-1,1),Vector2i(-1,0)]
	elif dir.x == 0 and dir.y < 0:
		dirs = [Vector2i(0,1),Vector2i(1,0),Vector2i(1,1),Vector2i(-1,0),Vector2i(-1,1)]
	elif dir.x < 0 and dir.y == 0:
		dirs = [Vector2i(0,1),Vector2i(1,0),Vector2i(1,1),Vector2i(0,-1),Vector2i(1,-1)]
	elif dir.x < 0 and dir.y > 0:
		dirs = [Vector2i(1,0),Vector2i(1,1),Vector2i(0,-1),Vector2i(1,-1),Vector2i(-1,-1)]
	elif dir.x > 0 and dir.y > 0:
		dirs = [Vector2i(-1,0),Vector2i(-1,-1),Vector2i(0,-1),Vector2i(1,-1),Vector2i(-1,1)]
	elif dir.x < 0 and dir.y < 0:
		dirs = [Vector2i(1,-1),Vector2i(-1,1),Vector2i(0,1),Vector2i(1,0),Vector2i(1,1)]
	elif dir.x > 0 and dir.y < 0:
		dirs = [Vector2i(-1,0),Vector2i(-1,-1),Vector2i(-1,1),Vector2i(0,1),Vector2i(1,1)]
	else:
		for i in range(-1,2):
			for j in range(-1,2):
				if i == 0 and j == 0:
					continue;
				dirs.push_back(Vector2i(i,j))
	return dirs

func getDirections(dir : Vector2i) -> Array[Vector2i]:
	print(dir)
	var dirs : Array[Vector2i] = []
	if dir.x == 0 and dir.y > 0:
		dirs = [Vector2i(-1,-1),Vector2i(0,-1),Vector2i(1,-1)]
	elif dir.x > 0 and dir.y == 0:
		dirs = [Vector2i(-1,-1),Vector2i(-1,1),Vector2i(-1,0)]
	elif dir.x == 0 and dir.y < 0:
		dirs = [Vector2i(0,1),Vector2i(1,1),Vector2i(-1,1)]
	elif dir.x < 0 and dir.y == 0:
		dirs = [Vector2i(1,0),Vector2i(1,1),Vector2i(1,-1)]
	elif dir.x < 0 and dir.y > 0:
		dirs = [Vector2i(1,0),Vector2i(0,-1),Vector2i(1,-1)]
	elif dir.x > 0 and dir.y > 0:
		dirs = [Vector2i(-1,0),Vector2i(-1,-1),Vector2i(0,-1)]
	elif dir.x < 0 and dir.y < 0:
		dirs = [Vector2i(0,1),Vector2i(1,0),Vector2i(1,1)]
	elif dir.x > 0 and dir.y < 0:
		dirs = [Vector2i(-1,0),Vector2i(-1,1),Vector2i(0,1)]
	else:
		for i in range(-1,2):
			for j in range(-1,2):
				if i == 0 and j == 0:
					continue;
				dirs.push_back(Vector2i(i,j))
	return dirs

requestTurn
create requestPath
nextRequestPath
requestPathProcessed
create requestAttack
nextRequestAttack
requestTurnProcessed

extends Node
class_name TurnManager

@onready var ter = $"../Terrain"
@onready var gState = $"../GameState"
#Manager
var requestQueuePath : Array[Turn] = []
var requestQueueAtk : Array[Turn] = []
var reqPath : Turn = null
var reqAtk : Turn = null
var processingPath : bool = false
var processingAtk : bool = false

#Turn
var opponent : Dictionary = {}
var team : Array[Card] = []
#Projectile
const proj = preload("res://Scene/projectile.tscn")

func _ready():
	Signals.connect("requestTurn",requestTurn)
	Signals.connect("arrivedNowAttack", requestAttack)
	Signals.connect("projectileHitTarget", requestProcessed)

func requestTurn(card : Card):
	if card.getStatus().getCurrentValue(Stat.T.hp) > 0:
		requestQueuePath.append(Turn.new(card))
		nextRequestPath()

func nextRequestPath():
	if !processingPath and !requestQueuePath.is_empty():
		reqPath = requestQueuePath.pop_front()
		if is_instance_valid(reqPath.card):
			processingPath = true
			firstFindTarget()
		else:
			requestProcessed()

func firstFindTarget():
	if opponent.is_empty():
		requestProcessed()
		processingPath = false
		return
	var target = null
	var cardpos = reqPath.card.global_position
	var currentdis = null
	for o in opponent:
		if is_instance_valid(o):
			if target == null:
				target = o
				currentdis = ter.getDistance(cardpos,target.global_position)
			var distance = ter.getDistance(cardpos,o.global_position)
			if distance < currentdis:
				target = o
				currentdis = distance
	if target == null:
		requestProcessed()
		return
	reqPath.target = target
	var damage = 30 * -1
	reqPath.damage = damage
	opponent[target] -= reqPath.target.getStatus().calculateDamage(damage*-1)
	if opponent[target] <= 0:
		opponent.erase(reqPath.target)
	secondFindPath()

func secondFindPath():
	var range_ = 4
	var cardpos = reqPath.card.global_position
	var targetp = reqPath.target.global_position
	var path = ter.getPath(cardpos,targetp,range_,true)
	reqPath.card.setPath(path)
	if reqPath.card.onlyPath:
		processingPath = false
		nextRequestPath()

func requestAttack():
	requestQueueAtk.append(reqPath)
	processingPath = false
	nextRequestPath()
	nextRequestAttack()

func nextRequestAttack():
	if !processingAtk and !requestQueueAtk.is_empty():
		reqAtk = requestQueueAtk.pop_front()
		if is_instance_valid(reqAtk.card) and is_instance_valid(reqAtk.target):
			processingAtk = true
			thirdAttack()
		else:
			requestProcessed()

func thirdAttack():
	reqAtk.card.getSkill().attackTarget(reqAtk.target)
	shootProjectile()

func shootProjectile():
	var newproj = proj.instantiate()
	newproj.global_position = reqAtk.card.getSpritePos()
	newproj.setProjectile(reqAtk.card,reqAtk.target,reqAtk.damage)
	call_deferred("add_child", newproj)

func requestProcessed():
	processingAtk = false
	if requestQueueAtk.is_empty() and requestQueuePath.is_empty():
		print("r")
		gState.n()
	else:
		if !requestQueueAtk.is_empty():
			nextRequestAttack()
		if !processingPath:
			nextRequestPath()

func _on_game_state_new_turn(currentState):
	requestQueuePath.clear()
	reqPath = null
	processingPath = false
	requestQueueAtk.clear()
	reqAtk = null
	processingAtk = false
	opponent.clear()
	team.clear()
	if currentState == gState.states.PlayerTurn || currentState == gState.states.GoToRoom:
		for p in gState.players.get_children():
			team.append(p)
		for e in gState.enemies.get_children():
			opponent[e] = e.getStatus().getCurrentValue(Stat.T.hp)
	elif currentState == gState.states.EntityTurn:
		for e in gState.enemies.get_children():
			team.append(e)
		for p in gState.players.get_children():
			opponent[p] = p.getStatus().getCurrentValue(Stat.T.hp)

class Turn:
	var card : Card
	var target : Card
	var damage : int
	func _init(card_ : Card):
		card = card_


func requestTurn(card : Card):
	if card.getStatus().getCurrentValue(Stat.T.hp) > 0:
		requestQueuePath.append(Turn.new(card))
		nextRequestPath()

func nextRequestPath():
	if !processingPath and !requestQueuePath.is_empty():
		reqPath = requestQueuePath.pop_front()
		processingPath = true
		firstFindPath()

func findTarget():
	if opponent.is_empty():
		return
	var target : Card = null
	var minDistance : int
	for enemy in opponent:
		if target == null:
			target = enemy
			minDistance = ter.getDistance(reqPath.card.global_position,target.global_position)
			continue
		var distance = ter.getDistance(reqPath.card.global_position,enemy.global_position)
		if distance < minDistance:
			target = enemy
			minDistance = distance
	reqPath.target = target
	var damage = 30 * -1
	reqPath.damage = damage
	opponent[target] -= reqPath.target.getStatus().calculateDamage(damage*-1)
	if opponent[target] <= 0:
		opponent.erase(reqPath.target)

func firstFindPath():
	findTarget()
	var range_ = 4
	var cardpos = reqPath.card.global_position
	var targetp = reqPath.target.global_position
	var path = ter.getPath(cardpos,targetp,range_,true)
	reqPath.card.setPath(path)
	if reqPath.card.onlyPath:
		processingPath = false
		nextRequestPath()

func requestAttack():
	pass

func nextRequestAttack():
	pass

func thirdAttack():
	reqAtk.card.getSkill().attackTarget(reqAtk.target)
	shootProjectile()

func shootProjectile():
	var newproj = proj.instantiate()
	newproj.global_position = reqAtk.card.getSpritePos()
	newproj.setProjectile(reqAtk.card,reqAtk.target,reqAtk.damage)
	call_deferred("add_child", newproj)

func attackedTarget():
	processingAtk = false
	requestProcessed()

func requestProcessed():
	if requestQueueAtk.is_empty() and requestQueuePath.is_empty():
		print("r")
		gState.n()
	else:
		nextRequestPath()
		nextRequestAttack()